---
- name: Check version of installed ansible.windows collection
  ansible.builtin.debug:
    msg: "ansible.windows version {{ lookup('community.general.collection_version', 'ansible.windows') }}"

- name: Create temp folder on target
  ansible.windows.win_file:
    path: "{{ sp_install_files_path }}"
    state: directory

- name: Copy HTTP install file
  ansible.windows.win_get_url:
    url: "{{ sp_install_source_dir }}/{{ sp_install_source_file }}"
    dest: "{{ sp_install_files_path }}\\{{ sp_install_source_file }}"
    force: false
  when: sp_install_source_dir is ansible.builtin.uri(schemes=['http', 'https'])

- name: Copy install file from Ansible server
  ansible.windows.win_copy:
    src: "{{ playbook_dir }}/{{ sp_install_source_dir }}/{{ sp_install_source_file }}"
    dest: "{{ sp_install_files_path }}\\{{ sp_install_source_file }}"
    force: false
  when: sp_install_source_dir is not ansible.builtin.uri(schemes=['http', 'https'])

- name: Install IIS features
  ansible.windows.win_feature:
    name:
      - Web-Server                   # IIS Web Server
      - Web-Mgmt-Tools               # IIS Management Tools
      - Web-Asp-Net45                # ASP.NET 4.5 (Highest version available)
      - Web-Http-Redirect            # HTTP Redirect feature
      - Web-Http-Logging             # IIS Logging
      - Web-Request-Monitor          # IIS Monitoring
      - Web-Net-Ext45                # .NET Extensibility 4.5
      - Web-Windows-Auth             # Windows Authentication for IIS
      - Web-ISAPI-Ext                # ISAPI Extensions
      - Web-ISAPI-Filter             # ISAPI Filters
      - NET-Framework-Features       # .NET Framework 3.5 (Includes HTTP Activation)
      - NET-Framework-45-Features    # .NET Framework 4.5+
      - NET-WCF-HTTP-Activation45    # WCF HTTP Activation for .NET 4.5+
      - Web-Metabase                 # IIS 6 Metabase Compatability
      - MSMQ                         # Message Queuing (MSMQ)
      - MSMQ-Server                  # MSMQ Server component
      - MSMQ-Services                # MSMQ Services
      - Web-Stat-Compression         # Static Content Compression
      - Web-Dyn-Compression          # Dynamic Content Compression
    state: present
  register: iis_features
  notify: Restart IIS

- name: Copy HTTP certificate file
  ansible.windows.win_get_url:
    url: "{{ sp_install_source_dir }}/{{ sp_certificate_source_file }}"
    dest: "{{ sp_install_files_path }}\\{{ sp_certificate_source_file }}"
    force: false
  when: sp_install_source_dir is ansible.builtin.uri(schemes=['http', 'https'])

- name: Copy certificate file from Ansible server
  ansible.windows.win_copy:
    src: "{{ playbook_dir }}/{{ sp_install_source_dir }}/{{ sp_install_certificate_file }}"
    dest: "{{ sp_install_files_path }}\\{{ sp_install_certificate_file }}"
    force: false
  when: sp_install_source_dir is not ansible.builtin.uri(schemes=['http', 'https'])

- name: Import certificate using certutil (used instead of ansible.windows.win_certificate_store due to issues binding)
  ansible.windows.win_shell: |
    certutil -f -p "{{ lookup('ansible.builtin.env', 'CERTIFICATE_PASSWORD') }}" -importPFX "{{ sp_install_files_path }}\\{{ sp_certificate_source_file }}"

- name: Get the certificate thumbprint
  ansible.windows.win_shell: |
    $cert = Get-ChildItem -Path Cert:\LocalMachine\My | Where-Object { $_.Subject -match "CN={{ sp_certificate_common_name }}" }
    $cert.Thumbprint
  register: cert_thumbprint

- name: Bind certificate to Default Website in IIS
  community.windows.win_iis_webbinding:
    name: "Default Web Site"
    protocol: https
    port: 443
    certificate_hash: "{{ cert_thumbprint.stdout.strip() }}"
    certificate_store_name: "MY"
  when: cert_thumbprint.stdout | length > 0

- name: Enable Static & Dynamic Compression in IIS
  ansible.windows.win_shell: |
    Import-Module WebAdministration
    Set-WebConfigurationProperty -Filter /system.webServer/httpCompression -Name dynamicCompressionEnableCpuUsage -Value 0
    Set-WebConfigurationProperty -Filter /system.webServer/httpCompression -Name staticCompressionEnabled -Value True
    Set-WebConfigurationProperty -Filter /system.webServer/httpCompression -Name dynamicCompressionEnabled -Value True

- name: Ensure the System Pulse config directory exists
  ansible.windows.win_file:
    path: "C:\\Program Files (x86)\\Epic\\System Pulse\\Web\\App_Data\\Config"
    state: directory

- name: Generate ConnectionStrings.config from template
  ansible.builtin.template:
    src: "ConnectionStrings.config.j2"
    dest: "C:\\Program Files (x86)\\Epic\\System Pulse\\Web\\App_Data\\Config\\ConnectionStrings.config"
    mode: ignore
  args:
    creates: "C:\\Program Files (x86)\\Epic\\System Pulse\\Web\\App_Data\\Config\\ConnectionStrings.config"

- name: Generate membership.config from template
  ansible.builtin.template:
    src: "membership.config.j2"
    dest: "C:\\Program Files (x86)\\Epic\\System Pulse\\Web\\App_Data\\Config\\membership.config"
    mode: ignore
  args:
    creates: "C:\\Program Files (x86)\\Epic\\System Pulse\\Web\\App_Data\\Config\\membership.config"

- name: Install System Pulse
  ansible.windows.win_package:
    path: "{{ sp_install_files_path }}\\{{ sp_install_source_file }}"
    product_id: "{12345678-ABCD-1234-5678-ABCDEFGH123}" # Replace with the actual MSI Product ID
    state: present

- name: Start System Pulse Configuration Editor with UPGRADE flag
  ansible.windows.win_shell: |
    $process = Start-Process -FilePath "{{ sp_configuration_editor_exe }}" -ArgumentList "-UPGRADE" -PassThru
    Start-Sleep -Seconds 15
    if (!$process.HasExited) { Stop-Process -Id $process.Id -Force }
